/* Enclave.edl - Top EDL file. */

enclave {

    trusted {
    											  
    	public void ecall_sgxdnn_benchmarks(int num_threads);										 									 
        
        public void ecall_load_model_float([user_check] char* model_json,
									 [user_check] float** filters);

        public void ecall_predict_float([user_check] float* input, [user_check] float* output, int batch_size);
		public void ecall_input_exp([user_check] float* gpu_x_exp_raw, [user_check] float* r_exp_raw, [user_check] float* a_idx, 
									[user_check] float* r_a_idx, [user_check] float* x_r_idx, [user_check] float* output, [user_check] float* integrity_gap);
		public void ecall_input_softmax([user_check] float* x_exp_raw, [user_check] float* output);
		public void ecall_input_gelu([user_check] float* x, [user_check] float* output);
		public void ecall_input_TEE_XY([user_check] unsigned int* dim_1, [user_check] unsigned int* dim_2, [user_check] unsigned int* dim_3, [user_check] float* x, [user_check] float* y, [user_check] float* output);
		public void ecall_input_TEE_softmax([user_check] float* x, [user_check] float* output);
		public void ecall_input_layernorm([user_check] float* x, [user_check] float* output);
		public void ecall_input_QK([user_check] unsigned int* gpu_res, [user_check] unsigned int* Q_selected_indices, 
									[user_check] unsigned int* K_selected_indices, [user_check] unsigned int* permuted_QR_indices, 
									[user_check] unsigned int* permuted_KS_indices, [user_check] unsigned int* permuted_dim, 
									[user_check] unsigned int* output);
									
		public void ecall_input_XW([user_check] unsigned int* gpu_res, [user_check] unsigned int* X_selected_indices, 
									[user_check] unsigned int* W_selected_indices, [user_check] unsigned int* permuted_XR_indices, 
									[user_check] unsigned int* permuted_WS_indices, [user_check] unsigned int* permuted_dim_X, 
									[user_check] unsigned int* permuted_dim_W, [user_check] unsigned int* output);
						
		public void ecall_input_AV([user_check] unsigned int* gpu_res, [user_check] unsigned int* A_selected_indices, 
									[user_check] unsigned int* V_selected_indices, [user_check] unsigned int* permuted_AR_indices, 
									[user_check] unsigned int* permuted_VS_indices, [user_check] unsigned int* permuted_dim_A, 
									[user_check] unsigned int* permuted_dim_V, [user_check] unsigned int* output);

        public void ecall_load_model_float_verify([user_check] char* model_json,
									 [user_check] float** filters, int preproc);

        public void ecall_predict_verify_float([user_check] float* input, [user_check] float* output, [user_check] float** aux_data, int batch_size);
 		
 		public void ecall_slalom_init(int integrity, int privacy, int batch_size);
		public void ecall_slalom_get_r([user_check] float *out, int size);
		public void ecall_slalom_set_z([user_check] float *z, [user_check] float *z_enc, int size);
 		
 		public void ecall_slalom_blind_input([user_check] float *in,
                               		  		 [user_check] float *out,
                               		  		 int size);
 		
 		public void ecall_slalom_relu([user_check] float *in,
                               		  [user_check] float *out,
                               		  [user_check] float* blind,
                               		  int size,
                               		  [user_check] char* activation);
    
    	public void ecall_slalom_maxpoolrelu([user_check] float *in,
                               	  			 [user_check] float *out,
                               	  			 [user_check] float* blind,
										     [user_check] long int dim_in[4],
										     [user_check] long int dim_out[4],
										     int window_rows, int window_cols,
										     int row_stride, int col_stride,
										     int is_padding_same);
    };

    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_start_clock();
        double ocall_get_time();
        void ocall_end_clock([in, string] const char *str);
    };
};
